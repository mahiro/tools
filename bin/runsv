#!/usr/bin/perl -w
use strict;
use FindBin;

BEGIN {
	my $local = "$FindBin::RealBin/$FindBin::RealScript.local";
	require $local if -f $local;
}

use File::Basename;
use File::Path;
use Getopt::Long;
use IO::Handle;
use Proc::Daemon;
use Proc::ProcessTable;
use YAML::XS;

use constant HOOK_FAILED  => -3;
use constant INCONSISTENT => -2;
use constant NOT_RUNNING  => -1;
use constant STOPPED      =>  0;
use constant RUNNING      =>  1;
use constant STARTED      =>  2;
use constant RESTARTED    =>  3;

use constant DEFAULT_YAML_FILE    => 'runsv.yml';
use constant DEFAULT_PID_FILE     => 'proc.pid' ;
use constant DEFAULT_WORK_DIR     => '.';
use constant DEFAULT_ALLOW_SECOND => 5;

sub parse_args {
	my $opt = {};

	GetOptions $opt, qw(
		stay restart kill check generate
		dir=s workdir=s
		pidfile=s outfile=s errfile=s infile=s
		match=s allow=i
		quiet help
	) or die $!;

	if (@ARGV < 0 or $opt->{help}) {
		usage($opt);
	}

	configure_action($opt, @ARGV);
	return wantarray ? ($opt, @ARGV) : $opt;
}

sub usage {
	my ($opt) = @_;

	my $cmd = basename($0);
	my $yaml = DEFAULT_YAML_FILE;
	my $pidfile = DEFAULT_PID_FILE;
	my $allow = DEFAULT_ALLOW_SECOND;

	print <<END;
Usage: $cmd [CONFIGS..|OPTIONS..] [ACTION | [--] COMMAND [ARGS..]]
END

	if (!$opt->{help}) {
		print <<END;
Try -help for details.
END
	} else {
		print <<END;

Execute and manage an indefinitely running command.

If COMMAND is given, the command will be executed as a daemon and configs will
be stored in '$yaml' file. Otherwise, ACTION is performed based on the
existing config.

Actions:
  -s, -stay
    Start the process only when it is not running.
  -r, -restart
    Kill and then start the process.
  -k, -kill
    Kill the process.
  -c, -check
    Check the status of the process.
  -g, -generate
    Generate or update config, but do not start or stop the process.

  COMMAND can also be specified together with -stay, -restart, or -generate
  to update the existing config (see below section for details about when the
  config file is overwritten).

Configs:
  -p, -pidfile FILE_NAME
    Store PID. (Default = '$pidfile')
  -w, -workdir WORK_DIR
    Set working dir for the process. (Default = config dir)
  -i, -infile  FILE_NAME
    Redirect STDIN. (Default = '/dev/null')
  -o, -outfile FILE_NAME
    Redirect STDOUT. (Default = '/dev/null')
  -e, -errfile FILE_NAME
    Redirect STDERR. (Default = '/dev/null')
  -m, -match CMD_REGEX
    Use regex as an extra measure when determining if the process is running.
    Without this option, the determination is based on PID and start time,
    with respect to the PID file's content and modification time.
    If CMD_REGEX is an empty string ('') or a single dot ('.'), the command
    line itself will be used as the pattern.
  -a, -allow SECOND
    When comparing the command start time and the modification time of the PID
    file, allow the specified second difference. (Default = $allow seconds)

  Configs can be specified either on start-up or with any actions. On start-up,
  a new config file will be generated with the values.
  If the action is -stay, -restart, or -generate, the current status is checked
  with the existing config, and new configs will overwrite the existing file.
  (For -stay, the file will not be overwritten when the process has already
  been running.)
  In the case with -kill or -check, the supplied values are used to stop or
  check the current process.

  Note: if -dir option is used, any paths of config values will be relative to
  the -dir directory.

Other Options:
  -d, -dir  BASE_DIR_OR_YAML_FILE
    Change BASE_DIR_OR_YAML_FILE. (Default dir = PWD, config = '$yaml')
  -q, -quiet
    Suppress output.
  -h, -help
    Display help.

Hooks:
  Hooks can be added manually to the config file, so that specified programs
  or scripts are executed on events, and the exit code can be utilized to
  control the flow.

  Below is an example config for hooks.

---
hooks:
  before_start: ['prog1', 'arg1', 'arg2']
  after_start: ['prog2', 'arg1', 'arg2']
  before_stop: 'prog3 arg1 arg2 > output'
  after_stop: 'prog4 arg1 arg2 | prog5'
  nocheck: true
  nocheck_before_start: false
---

  Each event handler can be given as either an array or a single string.
  By default, if the exit code of each handler is non-zero, $cmd will be
  terminated at that point, unless 'nocheck' value is set to true.
  The 'nocheck' option can be specified for individual event, such as
  'nocheck_before_start' etc.

END
	}

	exit 1;
}

sub configure_action {
	my ($opt, @command) = @_;
	my @actions = ();

	for my $action (qw(check kill restart stay generate)) {
		if ($opt->{$action}) {
			push @actions, $action;
		}
	}

	if (@actions == 0) {
		if (@command > 0) {
			$opt->{'start'} = 1;
			push @actions, 'start';
		} else {
			usage();
		}
	}

	if (@actions == 1) {
		if ($opt->{kill} || $opt->{stay} || $opt->{check}) {
			if (@command > 0) {
				warn "Error: COMMAND cannot be specified for -@actions\n";
				exit 1;
			} else {
				for my $key (qw(outfile errfile infile pidfile)) {
					if (defined $opt->{$key}) {
						warn "Error: config -$key cannot be changed with -@actions\n";
						exit 1;
					}
				}
			}
		}
	} else {
		warn "Error: multiple actions cannot be given: @actions\n";
		exit 1;
	}
}

sub read_yaml {
	my ($yaml_file) = @_;
	my $text;

	open IN, $yaml_file or die "$yaml_file: $!";
	{local $/; $text = <IN>}
	close IN;

	return Load($text);
}

sub write_yaml {
	my ($yaml_file, $config) = @_;
	my $text = Dump($config);

	open OUT, '>', $yaml_file or die "$yaml_file: $!";
	print OUT $text;
	close OUT;
}

sub inherit_opt_config {
	my ($opt, $config) = @_;
	my $updated = 0;

	for my $key (qw(workdir pidfile outfile infile errfile match allow)) {
		if (defined $opt->{$key} and
				(!defined $config->{$key} or $opt->{$key} ne $config->{$key})) {
			$config->{$key} = $opt->{$key};
			$updated = 1;
		}
	}

	return $updated;
}

sub load_config {
	my ($opt) = @_;
	my $config;

	$config = read_yaml $opt->{yaml} if -f $opt->{yaml};

	if ($config) {
		validate_config($config);
	}

	# Normalize hooks (Each event handler must be an array ref, as the args to 
	# 'system()' call.)
	if (exists $config->{hooks}) {
		for my $event (%{$config->{hooks}}) {
			if ($event !~ /^nocheck/) {
				unless (ref $config->{hooks}{$event}) {
					$config->{hooks}{$event} = [$config->{hooks}{$event}];
				}
			}
		}
	}

	return wantarray ? ($config, $opt->{yaml}) : $config;
}

sub store_config {
	my ($opt, $config) = @_;

	unless ($opt->{temporary}) {
		write_yaml($opt->{yaml}, $config);
	}
}

sub validate_config {
	my ($config) = @_;

	for my $key (qw(dir command pidfile)) {
		unless (defined $key) {
			warn "Error: $key is missing in config";
			exit 1;
		}
	}
}

sub get_process_status {
	my ($config) = @_;

	my $code = NOT_RUNNING;
	my $pid = 0;
	my $command;
	my $allow = defined $config->{allow} ? $config->{allow} : DEFAULT_ALLOW_SECOND;

	my $pattern;

	if (defined $config->{match}) {
		$pattern = $config->{match};

		if ($pattern =~ /^\.?$/) {
			$pattern = join(' ', map {quotemeta $_} @{$config->{command}}).'$';
			$pattern =~ s/^\s+//;
			$pattern =~ s/\s+/\\s+/g;
			$pattern =~ s/\\s\+$/\\s*/;
		}
	}

	if (open IN, $config->{pidfile}) {
		$pid = int(<IN>);
		close IN;

		my $mtime = (stat $config->{pidfile})[9];
		my $pt = Proc::ProcessTable->new(cache_ttys => 1);

		for my $p (@{$pt->table}) {
			if ($pid == $p->pid) {
				$command = $p->cmndline;

				if (defined $pattern and $command !~ /$pattern/) {
					$code = INCONSISTENT;
				} elsif ($allow >= 0 and abs($p->start - $mtime) > $allow) {
					$code = INCONSISTENT;
				} else {
					$code = RUNNING;
				}

				last;
			}
		}
	}

	return {code => $code, pid => $pid, command => $command};
}

sub show_status {
	my ($opt, $config, $status) = @_;
	my $code = $status->{code};
	my $status_str;

	if ($code == NOT_RUNNING) {
		$status_str = 'NOT RUNNING';
	} elsif ($code == RUNNING) {
		$status_str = 'RUNNING';
	} elsif ($code == INCONSISTENT) {
		$status_str = 'INCONSISTENT';
	} elsif ($code == STOPPED) {
		$status_str = 'STOPPED';
	} elsif ($code == STARTED) {
		$status_str = 'STARTED';
	} elsif ($code == RESTARTED) {
		$status_str = 'RESTARTED';
	}

	unless ($opt->{quiet}) {
		print "Status: $status_str", ($status->{pid} ? " (PID: $status->{pid})" : ''), "\n";

		print "Command: ", (($code != INCONSISTENT && defined $status->{command}) ?
				$status->{command} : "@{$config->{command}}"), "\n";
	}

	if ($code == INCONSISTENT) {
		warn "Error: unknown process is running\n";
		warn "Unknown: $status->{command}\n";
	}
}

sub wait_for_process {
	my ($config, $completion_code) = @_;
	my $status;

	while (1) {
		$status = get_process_status($config);
		my $code = $status->{code};
		last if $code == $completion_code || $code == INCONSISTENT;
		print "CODE = $code\n";
		sleep 1;
	}

	return $status;
}

sub handle_hook {
	my ($opt, $config, $hook_name, $status) = @_;

	if (exists $config->{hooks}{$hook_name}) {
		my $hook = $config->{hooks}{$hook_name};
		my $ret = system(@$hook);

		my $nocheck = 0;

		if (defined $config->{hooks}{"nocheck_$hook_name"}) {
			$nocheck = $config->{hooks}{"nocheck_$hook_name"};
		} elsif (defined $config->{hooks}{nocheck}) {
			$nocheck = $config->{hooks}{nocheck};
		}

		if ($nocheck) {
			return;
		} elsif ($ret != 0) {
			$status->{hook_failed} = 1;
			$status->{hook_name} = $hook_name;
			show_status($opt, $config, $status);

			warn "Warning: '$hook_name' hook failed (exit code = $ret)\n";
			warn "Hook: @$hook\n";

			exit 1;
		}
	}
}

sub main {
	my ($opt, @command) = parse_args();

	if (defined $opt->{dir}) {
		if (-d $opt->{dir}) {
			chdir $opt->{dir};
			$opt->{yaml} = DEFAULT_YAML_FILE;
		} else {
			my $dir = dirname($opt->{dir});
			mkpath $dir;
			chdir $dir;
			$opt->{yaml} = basename($opt->{dir});
			$opt->{dir} = $dir;
		}
	} else {
		$opt->{dir}  = DEFAULT_WORK_DIR;
		$opt->{yaml} = DEFAULT_YAML_FILE;
	}

	my $should_update = $opt->{start} || $opt->{stay} ||
			$opt->{restart} || $opt->{generate};

	my ($config, $yaml);
	my $updated;
	my $status;

	# Phase 1: Check config / Stop process
	if ($opt->{stay}) {
		($config, $yaml) = load_config($opt);

		if ($config) {
			unless ($should_update) {
				$updated = 1 if inherit_opt_config($opt, $config);
			}

			$status = get_process_status($config);

			if ($status->{code} == RUNNING) {
				show_status($opt, $config, $status);
				exit 0;
			} elsif ($status->{code} == INCONSISTENT) {
				show_status($opt, $config, $status);
				exit 1;
			}
		}
	} elsif ($opt->{start} || $opt->{generate}) {
		($config, $yaml) = load_config($opt);

		if ($config) {
			unless ($should_update) {
				$updated = 1 if inherit_opt_config($opt, $config);
			}

			if ($opt->{start}) {
				warn "Error: config file '$yaml' already exists\n";
				exit 1;
			} elsif ($opt->{generate}) {
				print "Config file '$yaml' already exists. Modify config? [y/N] ";
				STDOUT->flush;
				exit 1 if <STDIN> !~ /^y/i;
			}
		}
	} elsif ($opt->{kill} || $opt->{restart} || $opt->{check}) {
		($config, $yaml) = load_config($opt);

		if (!$config) {
			warn "Error: config file not found\n";
			exit 1;
		}

		if ($config) {
			unless ($should_update) {
				$updated = 1 if inherit_opt_config($opt, $config);
			}

			$status = get_process_status($config);

			if ($status->{code} == RUNNING) {
				if ($opt->{check}) {
					show_status($opt, $config, $status);
					exit 0;
				} else {
					handle_hook($opt, $config, 'before_stop', $status);
					my $prev_command = $status->{command};
					kill 9, $status->{pid};

					$status = wait_for_process($config, NOT_RUNNING);
					$status->{command} ||= $prev_command;

					if ($status->{code} == NOT_RUNNING) {
						$status->{code} = STOPPED;
						unlink $config->{pidfile};

						handle_hook($opt, $config, 'after_stop', $status);

						if ($opt->{kill}) {
							show_status($opt, $config, $status);
						}
					} elsif ($status->{code} == INCONSISTENT) {
						show_status($opt, $config, $status);
						exit 1;
					}
				}
			} elsif ($status->{code} == INCONSISTENT) {
				show_status($opt, $config, $status);
				exit 1;
			} elsif ($status->{code} == NOT_RUNNING) {
				if ($opt->{check}) {
					show_status($opt, $config, $status);
					exit 0;
				} elsif ($opt->{kill}) {
					show_status($opt, $config, $status);
					exit 1;
				}
			}
		}
	}

	# Phase 2: Modify config / Start process
	if ($opt->{start} || $opt->{restart} || $opt->{stay} || $opt->{generate}) {
		$config ||= load_config($opt, 1) or do {
			$config = {};
			$updated = 1;
		};

		if (@command) {
			$config->{command} = \@command;
			$updated = 1;
		}

		if (inherit_opt_config($opt, $config)) {
			$updated = 1;
		}

		unless (defined $config->{command}) {
			warn "Error: COMMAND must be specified\n";
			exit 1;
		}

		my $defaults = {
			pidfile => DEFAULT_PID_FILE,
			workdir => DEFAULT_WORK_DIR,
			allow   => DEFAULT_ALLOW_SECOND,
		};

		for my $key (keys %$defaults) {
			$config->{$key} = $defaults->{$key} unless defined $config->{$key};
		}

		validate_config($config);

		if ($updated and $should_update) {
			store_config($opt, $config);
		}

		if ($opt->{generate}) {
			exit 0;
		}

		my $stopped = ($status->{code} == STOPPED);
		$status ||= get_process_status($config);

		if ($status->{code} != NOT_RUNNING && $status->{code} != STOPPED) {
			show_status($opt, $config, $status);
			exit 1;
		}


		handle_hook($opt, $config, 'before_start', $status);

		my $pid = Proc::Daemon->new(
			work_dir => $config->{workdir},
			pid_file => $config->{pidfile},
			(defined $config->{outfile} ?
				(child_STDOUT => $config->{outfile}) : ()),
			(defined $config->{infile} ?
				(child_STDIN => $config->{infile}) : ()),
			(defined $config->{errfile} ?
				(child_STDERR => $config->{errfile}) : ()),
		)->Init;

		if ($pid) {
			$status = wait_for_process($config, RUNNING);

			if ($status->{code} == RUNNING) {
				$status->{code} = $stopped ? RESTARTED : STARTED;
				handle_hook($opt, $config, 'after_start', $status);
				show_status($opt, $config, $status);
			} elsif ($status->{code} == INCONSISTENT) {
				show_status($opt, $config, $status);
				exit 1;
			}
		} else {
			exec @{$config->{command}};
			exit;
		}
	}
}

main();

#!/usr/bin/perl -w
use strict;

use File::Basename;
use File::Copy;
use File::Temp qw(tempfile);
use Getopt::Long qw(:config bundling);
use IO::Handle;

sub parse_args {
	@ARGV = map {m/^-+(\d+)$/ ? ("--width", $1) : $_} @ARGV;

	my $opt = {};

	GetOptions $opt, qw(
		check|c
		width|w=i
		inplace|i
		suffix|s=s
		help|?|h
	) or die $!;

	if ($opt->{help} or (
			($opt->{inplace} or (defined $opt->{suffix} and $opt->{suffix} ne ''))
				and @ARGV < 1)) {
		$_ = basename($0);
		print <<END;
usage: $_ [OPTIONS] [FILES..]
Convert indent tabs into spaces. By default, FILES (or STDIN if no FILES) are
read and the converted text is printed out to STDOUT. If --inplace is given,
the contents of FILES are replaced by the converted text.

options:
  -c, --check
    Check how many lines would be affected.

  -w TABWIDTH, --width TABWIDTH, -2, -4, -8, etc.
    Specify the width of tabs for interpretation of the existing indents.

  -i, --inplace
    Replace the specified files.

  -s SUFFIX, --suffix SUFFIX
    If --inplace is turned on, the original files will be saved as the name with
    SUFFIX appended while FILES are replaced by the results. Otherwise, the
    results will be saved as the name with SUFFIX appended while the original
    files are not modified and no output goes to STDOUT.

  -h, -?, --help
    Display this help message.
END

		exit 1;
	}

	return ($opt, @ARGV);
}

sub configure_files {
	my ($opt, @files) = @_;
	my @result;
	my $read_dir;

	$read_dir = sub {
		my ($dir) = @_;
		opendir(my $d, $dir) or die "$!: $dir\n";

		while (my $entry = readdir $d) {
			next if $entry =~ /^\.\.?$/;
			next if $entry =~ /^\./;
			my $path = "$dir/$entry";

			if (-f $path) {
				push @result, $path;
			} elsif (-d $path) {
				$read_dir->($path);
			}
		}

		closedir $d;
	};

	for my $file (@files) {
		if (-f $file) {
			push @result, $file;
		} elsif (-d $file) {
			$read_dir->($file);
		} else {
			die "Invalid file: $file\n";
		}
	}

	return @result;
}

sub convert_spaces {
	my ($opt, $spaces) = @_;
	my $w = $opt->{width} || 8;
	$spaces =~ s/\t/' ' x $w/eg;
	return $spaces;
}

sub untabify_line {
	my ($opt, $line) = @_;
	$line =~ s/^([ \t]+)/convert_spaces($opt, $1)/e;
	return $line;
}

sub main {
	my ($opt, @files) = parse_args();
	@files = configure_files($opt, @files);

	if ($opt->{check}) {
		if (@files) {
			my $total = 0;

			for my $file (@files) {
				my $num = 0;
				open IN, $file;

				while (my $line = <IN>) {
					my $result = untabify_line($opt, $line);
					$num++ if $line ne $result;
				}

				close IN;

				if ($num > 0) {
					my $msg = ($num == 1 ? "1 line" : "$num lines");
					warn("untabify: $msg: $file\n");
				}

				$total += $num;
			}

			my $msg = ($total == 0 ? "no changes" :
					($total == 1 ? "1 line" : "$total lines"));

			warn("untabify: $msg\n");
		} else {
			my $num = 0;

			while (my $line = <STDIN>) {
				my $result = untabify_line($opt, $line);
				$num++ if $line ne $result;
			}

			my $msg = ($num == 0 ? "no changes" :
					($num == 1 ? "1 line" : "$num lines"));

			warn("untabify: $msg\n");
		}
	} elsif ($opt->{inplace}) {
		if (defined $opt->{suffix} and $opt->{suffix} ne '') {
			my $suffix = $opt->{suffix};

			for my $file (@files) {
				my $mode = (stat $file)[2];
				rename $file, $file.$suffix;
				open OUT, ">$file";
				open IN, $file.$suffix;
				print OUT untabify_line($opt, $_) while <IN>;
				close IN;
				close OUT;
				chmod $mode, $file;
			}
		} else {
			for my $file (@files) {
				my $mode = (stat $file)[2];
				my ($out, $tmp) = tempfile(DIR => '/tmp', CLEANUP => 1);
				open IN, $file;
				print $out untabify_line($opt, $_) while <IN>;
				$out->flush;
				close IN;

				if (-f $tmp) {
					unlink $file;
					copy $tmp, $file;
					chmod $mode, $file;
				}

				close $out;
			}
		}
	} else {
		if (defined $opt->{suffix} and $opt->{suffix} ne '') {
			my $suffix = $opt->{suffix};
			
			for my $file (@files) {
				my $mode = (stat $file)[2];
				open OUT, ">$file$suffix";
				open IN, $file;
				print OUT untabify_line($opt, $_) while <IN>;
				close IN;
				close OUT;
				chmod $mode, "$file$suffix";
			}
		} else {
			if (@files) {
				for my $file (@files) {
					open IN, $file;
					print untabify_line($opt, $_) while <IN>;
					close IN;
				}
			} else {
				print untabify_line($opt, $_) while <STDIN>;
			}
		}
	}
}

main();
